plugins {
    id 'java-library'
    id 'maven-publish'
    id 'java'
    id 'eclipse'
    id 'war'
    id 'org.springframework.boot' version '3.3.13'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'com.github.spotbugs' version '6.+'
    id 'org.owasp.dependencycheck' version '10.+'
    id 'com.diffplug.spotless' version '6.+'
    id 'checkstyle'
    id 'pmd'
    id 'org.sonarqube' version '4.+'
    id 'io.freefair.lombok' version '8.+'
    id 'org.openrewrite.rewrite' version '7.+'
}

/*
 * This file was generated by the Gradle 'init' task.
 */



dependencies {
    api libs.org.projectlombok.lombok
    api libs.org.springframework.boot.spring.boot.starter.web
    api libs.org.springframework.data.spring.data.commons
    api libs.org.springdoc.springdoc.openapi.starter.webmvc.ui
    api libs.com.google.code.findbugs.jsr305
    api libs.com.fasterxml.jackson.dataformat.jackson.dataformat.yaml
    api libs.jakarta.xml.bind.jakarta.xml.bind.api
    api libs.com.fasterxml.jackson.dataformat.jackson.dataformat.xml
    api libs.com.fasterxml.jackson.datatype.jackson.datatype.jsr310
    api libs.org.springframework.boot.spring.boot.starter.validation
    api libs.com.fasterxml.jackson.core.jackson.databind
    api libs.org.springframework.cloud.spring.cloud.starter.openfeign
    api libs.org.springframework.cloud.spring.cloud.starter.netflix.hystrix
    api libs.org.springframework.boot.spring.boot.starter.actuator
    rewrite("org.openrewrite.recipe:rewrite-spring:6.0.2")
    testImplementation libs.org.springframework.boot.spring.boot.starter.test
    compileOnly libs.org.springframework.boot.spring.boot.starter.tomcat
}

group = 'com.fineos.idam.petInsurance'
description = 'petInsurance'
java.sourceCompatibility = JavaVersion.VERSION_21

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
repositories {
    mavenCentral()
}
checkstyle {
    toolVersion = '10.18.0'
    configFile = file('checks/checkstyle.xml')
    configDirectory = file('checks')
    showViolations = true
    ignoreFailures = true
}

pmd {
    consoleOutput = true
    toolVersion = '7.5.0'
    rulesMinimumPriority = 5
    ignoreFailures = true
    ruleSetFiles = files('checks/pmd.xml')
}

dependencyCheck {
    failBuildOnCVSS = 11.0
    analyzers {
        assemblyEnabled = false
    }
    nvd {
        apiKey = System.getenv('NVD_KEY')
        delay = 6000 // Delay in milliseconds
    }
    formats = ['XML']
    outputDirectory = "$buildDir/reports/dependency-check"
    skipConfigurations = ['rewrite', 'rewriteClasspath']
}

spotbugsMain {
    ignoreFailures = true
    reports {
        xml {
            required = true
            outputLocation.set(file("$buildDir/reports/spotbugs/main.xml"))
        }
        html {
            required = true
            outputLocation.set(file("$buildDir/reports/spotbugs/main.html"))
        }
    }
    excludeFilter = file("checks/spotbugs-exclude.xml")
}

spotbugsTest {
    ignoreFailures = true
    reports {
        xml {
            required = true
            outputLocation.set(file("$buildDir/reports/spotbugs/test.xml"))
        }
        html {
            required = true
            outputLocation.set(file("$buildDir/reports/spotbugs/test.html"))
        }
    }
    excludeFilter = file("checks/spotbugs-exclude.xml")
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Ensure JaCoCo report is generated after tests run
    reports {
        junitXml {
            required.set(true)
        }
    }
}

jacocoTestReport {
    dependsOn test // Ensure tests run before generating the report
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

spotless {
    java {
        // Order the imports
        importOrder()

        // Automatically remove unnecessary imports
        removeUnusedImports()

        // Apply EVERESTEK formatter
        eclipse().configFile('checks/everestek-formatter.xml')
    }
}
rewrite {
    configFile = file("rewrite.yaml")
    activeRecipe("org.openrewrite.java.spring.boot3.CustomBestPractices")
    exclusion(
        "buildSrc/**/*.gradle",
        "buildSrc/*.gradle",
        "src/test/**/*.java",
        "src/main/resources/*"
    )
}

tasks.named('rewriteRun') {
    finalizedBy tasks.named('spotlessApply')
}
bootWar {
    String serviceName = project.getProperty('serviceName')
    archiveFileName = "${serviceName}.war"
}

// Disable spotlessCheck from being part of the standard `check` task
tasks.named('check') {
    dependsOn -= tasks.named('spotlessCheck')
}
