version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecs: circleci/aws-ecs@0.0.8

# Define the executors
executors:
  java-executor:
    docker:
      - image: cimg/openjdk:21.0.2  # Use OpenJDK 21 Docker image for Java-based builds

# Define pipeline parameters, change default values accordingly.
parameters:
  jar-file-name:
    default: petInsurance-1.0.0.war
    description: Name of the generated JAR/WAR file of the project.
    type: string
  jar-file-path:
    default: target/petInsurance-1.0.0.war
    description: Path where the generated JAR/WAR file is located.
    type: string
  aws-ecr-repo:
    default: accelerator-test
    description: Name of the Amazon ECR repository, where the docker image with be pushed after successful build.
    type: string
  docker-image-version:
    default: 1.0.0
    description: Latest version of the Docker image that will be used in the image tag.
    type: string
  aws-access-key-id:
    default: AWS_ACCESS_KEY_ID
    description: The access key id of the AWS account, passed as ENV variable.
    type: string
  aws-secret-access-key:
    default: AWS_SECRET_ACCESS_KEY
    description: The secret access key id of the AWS account, passed as ENV variable.
    type: string
  region:
    default: AWS_DEFAULT_REGION
    description: The default region of the AWS account, passed as ENV variable.
    type: string
  account-url:
    default: AWS_ECR_ACCOUNT_URL
    description: The account url of the AWS account, passed as ENV variable.
    type: string

# Define jobs
jobs:
  build:
    executor: java-executor
    steps:
      - checkout  # Checkout the source code from the repository

      - run:
          name: Set Execute Permission for Maven Wrapper
          command: chmod +x ./mvnw  # Ensure Maven wrapper script is executable

      - run:
          name: Resolve dependencies
          command: ./mvnw dependency:resolve  # Download and cache project dependencies

      - run:
          name: Build and Test
          command: ./mvnw clean install # Build, run tests, and generate test coverage reports

          # Store test coverage reports
      - store_artifacts:
          path: target/site/jacoco
          destination: jacoco-test-reports/

      # Store static analysis reports
      - store_artifacts:
          path: target/checkstyle-result.xml
          destination: quality-checks/checkstyle
      - store_artifacts:
          path: target/pmd.xml
          destination: quality-checks/pmd
      - store_artifacts:
          path: target/cpd.xml
          destination: quality-checks/cpd
      - store_artifacts:
          path: target/spotbugs.html
          destination: quality-checks/spotbugs

      - persist_to_workspace:
          root: .
          paths:
            - <<pipeline.parameters.jar-file-path>>  # Save the built JAR file for later jobs

  package:
    executor: java-executor
    working_directory: ~/workspace  # Define working directory for this job

    steps:
      - checkout  # Checkout the source code

      - attach_workspace:
          at: .  # Attach the workspace from the build job

      - setup_remote_docker  # Enable remote Docker support

      - run:
          name: Build and save Docker Image
          command: |
            export TIMESTAMP=$(date +"%Y%m%d%H%M%S")  # Generate a timestamp for the Docker image tag
            export TAG=<<pipeline.parameters.docker-image-version>>-${TIMESTAMP}_SNAPSHOT
            
            # Build Docker image using parameters
            docker build \
              --build-arg JAR_FILE_PATH=<<pipeline.parameters.jar-file-path>> \
              --build-arg JAR_FILE_NAME=<<pipeline.parameters.jar-file-name>> \
              -t <<pipeline.parameters.aws-ecr-repo>>:${TAG} .
            
            # Save Docker image to a tar file
            docker save -o my-app.tar <<pipeline.parameters.aws-ecr-repo>>:${TAG}
            
            # Save the tag information for the publish job
            echo $TAG > tag.txt

      - persist_to_workspace:
          root: /home/circleci/workspace
          paths:
            - tag.txt  # Save the image tag information for the next job
            - my-app.tar  # Save the built Docker image

  publish:
    executor: java-executor
    steps:
      - checkout  # Checkout the source code
      - attach_workspace:
          at: /home/circleci/workspace  # Attach the workspace from the package job
      - setup_remote_docker  # Enable remote Docker support

      - aws-cli/setup:
          aws-access-key-id: <<pipeline.parameters.aws-access-key-id>>
          aws-region: <<pipeline.parameters.region>>
          aws-secret-access-key: <<pipeline.parameters.aws-secret-access-key>>

      - run:
          name: Export Metadata
          command: |
            ls
            export TAG="$(cat /home/circleci/workspace/tag.txt)"  # Read the image tag from the file
            echo "TAG='${TAG}'"
            echo "export TAG='${TAG}'" >> $BASH_ENV  # Persist the tag as an environment variable

      # Load the previously build docker image
      - run:
          name: Load Docker image
          command: docker load -i /home/circleci/workspace/my-app.tar  # Load the saved Docker image

      # Authenticate with AWS ECR.
      - run:
          name: Login to ECR
          command: |
            aws ecr get-login-password --region $<<pipeline.parameters.region>> | docker login --username AWS --password-stdin $<<pipeline.parameters.account-url>>

      # Create a new tag for docker image to push into ECR
      - run:
          name: Tag Docker Image
          command: |
            docker tag <<pipeline.parameters.aws-ecr-repo>>:${TAG} $<<pipeline.parameters.account-url>>:${TAG}

      # Push docker image to ECR
      - run:
          name: Push Docker Image to AWS ECR
          command: |
            echo "Pushing image: $TAG"
            docker push $<<pipeline.parameters.account-url>>:$TAG  # Push the image to AWS ECR
  deploy:
    executor: java-executor
    working_directory: ~/workspace
    parameters:
      family:
        description: Name of the task definition's family.
        type: string
      cluster-name:
        description: The short name or full ARN of the cluster that hosts the service.
        type: string
      service-name:
        description: The name of the service to update.
        type: string
      container-image-name-updates:
        description: >
          Use this to update the Docker image names and/or tag names of existing

          containers that had been defined in the previous task definition.

          Expected format:
          container=<container-name>,image-and-tag=<image-name>:<tag-name>|image=<image-name>|tag=<tag-name>,container=...,image-and-tag|image|tag=...,

          For each container, specify only either "image-and-tag" or "image" or
          "tag".

          If "image-and-tag" is specified, the container image will be updated to
          the value of the name-value pair.

          If "image" is specified, the image tag defined in the previous task
          definition will be retained, if exists.

          If "tag" is specified, the image name defined in the previous task
          definition will be used.
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Export Metadata
          command: |
            export TAG="$(cat ~/workspace/tag.txt)"
            echo "TAG='${TAG}'"
            echo "export TAG='${TAG}'" >> $BASH_ENV
      - aws-cli/setup:
          aws-access-key-id: <<pipeline.parameters.aws-access-key-id>>
          aws-region: <<pipeline.parameters.region>>
          aws-secret-access-key: <<pipeline.parameters.aws-secret-access-key>>
      # Deploy updated Docker image to AWS ECS
      - aws-ecs/update-service:
          family: << parameters.family >>
          cluster-name: << parameters.cluster-name >>
          service-name: << parameters.service-name >>
          container-image-name-updates: << parameters.container-image-name-updates >>

# Define the workflow
workflows:
  version: 2
  build:
    jobs:
      - build:
          name: build  # Run the build job first
      - package:
          name: package
          requires:
            - build  # Ensure the package job runs only after the build is complete
      - publish:
          name: publish
          requires:
            - package  # Ensure the publishing job runs only after the package is complete
#      - deploy:
#          name: deploy
#          requires:
#            - publish
#          family: accelerator-test-family-name
#          cluster-name: test-accelerator-tool-cluster
#          service-name: # CHANGE_ME - Name of the service.
#          container-image-name-updates: # CHANGE_ME - Name of container and new tag
#          filters:
#            branches:
#              only:
#                - development # Add your branch name